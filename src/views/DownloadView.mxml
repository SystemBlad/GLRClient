<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="下载"
		xmlns:renderers="renderers.*">
	<fx:Script>
		<![CDATA[
			import classes.Constants;
			import classes.DataManager;
			import classes.EventManager;
			
			import com.juankpro.ane.localnotif.NotificationManager;
			
			import events.CourseItemEvent;
			import events.ScrollingEvent;
			
			import ie.jampot.nativeExtensions.Alert;
			import ie.jampot.nativeExtensions.AlertEvent;
			
			import models.Course;
			import models.Download;
			
			import mx.core.FlexGlobals;
			import mx.events.PropertyChangeEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			
			protected function onPropertyChange(event:PropertyChangeEvent):void
			{
				if (event.source == event.target && event.property == "verticalScrollPosition")
				{
					if (Math.abs(Number(event.oldValue) - Number(event.newValue)) > 10)
						list.dispatchEvent(new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED));
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				if (!DataManager.instance.user.loggedIn)
				{
					navigator.pushView(views.LoginView);
				}
				else
				{
				}
			}
			
			private function clearDownloads():void
			{
				while (items.length > 0) {
					if (items.getItemAt(0) is Download)
						(items.getItemAt(0) as Download).cancel();
					
					// delete storage content
					var directory:File = File.documentsDirectory.resolvePath(String(items.getItemAt(0).courseid));
					directory.deleteDirectory(true);
					
					// delete ui element
					items.removeItemAt(0);
				}
				
				DataManager.instance.clearCourse(Constants.TYPE_DOWNLOAD);
			}
			
			protected function btnClear_clickHandler(event:MouseEvent):void
			{
				DataManager
				if (NotificationManager.isSupported) {
					var nativeAlert:Alert = new Alert();
					nativeAlert.addEventListener(AlertEvent.ALERT_CLOSED, alertCloseHandler);
					nativeAlert.showAlert("确定要清空所有下载课程吗？", "", "否,是");
				}
				else {
					clearDownloads();
				}
			}
			
			private function alertCloseHandler(event:AlertEvent):void
			{
				if (event.label == "是") {
					clearDownloads();
				}
			}
			
			private function go2DetailPage(event:CourseItemEvent):void
			{
				var obj:Object;
				for (var i:int=0; i<items.length; i++) {
					if (items.getItemAt(i).kvideoid == event.kvidoeid) {
						obj = items.getItemAt(i);
						break;
					}
				}
				
				var directory:File = File.documentsDirectory.resolvePath(obj.courseid.toString());
				var configurl:String = directory.url + "/" + "config.txt";
				
				if (obj is Course) {
					var item:Course = obj as Course;
					navigator.pushView(views.CoursePlayView, {url:configurl,kvideoid:item.kvideoid, courseid:item.courseid, subject:item.subject, avatar:item.avatarUrl, pic:item.picUrl});
				}
				else if (obj is Download) {
					var down:Download = obj as Download;
					navigator.pushView(views.CoursePlayView, {url:configurl,kvideoid:down.kvideoid, courseid:down.courseid, subject:down.subject, avatar:down.avatarUrl, pic:down.picUrl});
				}
			}
			
			private function deleteItem(event:CourseItemEvent):void
			{
				// delete from persistency
				DataManager.instance.deleteCourseById(Constants.TYPE_DOWNLOAD, event.courseid);
				
				for (var i:int=0; i<items.length; i++) {
					if (items.getItemAt(i).courseid == event.courseid) {
						// cancel downloading
						if (items.getItemAt(i) is Download)
							(items.getItemAt(i) as Download).cancel();
						
						// delete storage content
						var directory:File = File.documentsDirectory.resolvePath(String(event.courseid));
						directory.deleteDirectory(true);
						
						// delete ui element
						items.removeItemAt(i);
						break;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayCollection id="items"/>
	</fx:Declarations>
	<s:viewActivate>
		<![CDATA[
		// event binding
		EventManager.instance.addEventListener(CourseItemEvent.Detail, go2DetailPage);
		EventManager.instance.addEventListener(CourseItemEvent.Delete, deleteItem);
		
		// data binding
		items = DataManager.instance.downloads;
		]]>
	</s:viewActivate>
	<s:viewDeactivate>
		<![CDATA[
		EventManager.instance.removeEventListener(CourseItemEvent.Detail, go2DetailPage);
		EventManager.instance.removeEventListener(CourseItemEvent.Delete, deleteItem);
		]]>
	</s:viewDeactivate>
	<s:Group width="100%" height="100%">
		<s:List id="list" width="100%" height="100%" dataProvider="{items}"
				visible="{items.length>0}" includeInLayout="{items.length>0}"
				creationComplete="list.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChange)"
				changing="list.dispatchEvent(new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED))"
				change="list_changeHandler(event)">
			<s:itemRenderer>
				<fx:Component>
					<renderers:HistoryItemRenderer labelField="subject"
												   messageFunction="getMessage"
												   messageStyleName="historyMessage"
												   decorator="@Embed('assets/decorator-arrow.png')">
						<fx:Script>
							<![CDATA[
								private function getMessage(item:Object):String
								{
									var date:Date = new Date();
									var diff:Number = Math.floor(date.getTime()/1000) - item.viewTime;
									trace(diff);
									var minutes:Number = Math.floor(diff/60);
									if (minutes == 0)
										return "现在";
									else if (minutes < 60)
										return minutes + "分钟前";
									else if (minutes < 60*24)
										return Math.floor(minutes/60) + "小时前";
									else
										return Math.floor(minutes/(60*24)) + "天前";
								}
							]]>
						</fx:Script>
					</renderers:HistoryItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:Label text="您还没有任何课程观看记录" styleName="captionText" color="#666666" width="100%" height="80" verticalAlign="middle" textAlign="center"
				 visible="{items.length==0}" includeInLayout="{items.length==0}"/>
	</s:Group>
	
	<s:actionContent>
		<s:Button id="btnClear" label="清除" click="btnClear_clickHandler(event)" visible="{items.length>0}"/>
	</s:actionContent>
</s:View>