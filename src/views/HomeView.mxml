<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		viewActivate="view1_viewActivateHandler(event)"
		preinitialize="preinitialize()"
		viewDeactivate="view1_viewDeactivateHandler(event)"
		title="今日推荐"
		xmlns:renderers="renderers.*" xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			import classes.DataManager;
			
			import com.juankpro.ane.localnotif.NotificationManager;
			
			import events.TapEvent;
			
			import ie.jampot.nativeExtensions.Alert;
			import ie.jampot.nativeExtensions.AlertEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.IItemRenderer;
			import spark.core.NavigationUnit;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			private var _currentPage:Number = 1;
			private var _totalPages:Number;
			private var _loadingCourses:Boolean;
			
			[Bindable]
			private var PULL_DOWN_TEXT:String = "获取更多课程...";
			private var RELEASE_TEXT:String = "松开立即刷新...";
			
			private function getCourseList():void
			{
				if (DataManager.instance.online) {
					_loadingCourses = true;
					listService.url = "http://www.glr.cn/appapi/app_course_list.php?page=" + _currentPage;
					listService.send();
				}
			}
			
			protected function pagedList_changeHandler(event:IndexChangeEvent):void
			{
				navigator.pushView(views.CourseDetailView, {kvideoid:recommends.getItemAt(event.newIndex).img_link,
															pic:recommends.getItemAt(event.newIndex).img_path,
															button_txt:"观看视频"});
			}

			protected function listService_resultHandler(event:ResultEvent):void
			{
				courseList.disableAutoUpdate();
				_loadingCourses = false;
				var json:String = String(event.result);
				trace(json);
				var obj:Object = JSON.parse(json);
				_totalPages = Math.ceil(Number(obj.numcont)/Number(obj.perpage));
				
				var oldLength:int = courseList.length;
				if (courseList.length > 0)
					courseList.removeItemAt(courseList.length-1);
				courseList.source = courseList.source.concat(obj.datalist);
				
				for (var i:int=0; i<obj.datalist.length; i++)
					DataManager.instance.scheduleCourseNotification(obj.datalist[i]);
				
				if (oldLength > 0 && oldLength < courseList.length)
				{
					list.validateNow();
					list.ensureIndexIsVisible(oldLength-1);
				}
				
				if (_currentPage == _totalPages)
				{
					arrowImage.visible = false;
					PULL_DOWN_TEXT = RELEASE_TEXT = "已经获取所有课程列表";
				}
				courseList.enableAutoUpdate();
				
				scroller.viewport.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onScroll);
				scroller.setStyle("verticalScrollPolicy", "on");
				scroller.setStyle("interactionMode", "touch");
			}
			
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				var user:String = FlexGlobals.topLevelApplication.persistenceManager.getProperty("username");
				var pass:String = FlexGlobals.topLevelApplication.persistenceManager.getProperty("password");
				if (user && pass)
				{
					DataManager.instance.user.login(user, pass);
				}
				
				list.mouseChildren = false;
				
				if (courseList.length == 0)
				{
					courseList.addItem({text:"loading..."});
					getCourseList();
				}
				
				if (recommends.length == 0 && DataManager.instance.online)
				{
					recommendService.send();
				}
			}
			
			protected function view1_viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				listService.cancel();
				scroller.viewport.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onScroll);
			}
			
			private function onScroll(event:PropertyChangeEvent):void
			{
				if (_loadingCourses) return;
				
				if (event.source == event.target && event.property == "verticalScrollPosition")
				{
					//trace(tapGroup.y+tapGroup.measuredHeight);
					var vScroll:Number = scroller.verticalScrollBar.value;
					//trace(int(event.newValue), "| total height=", scroller.height, ", ", scroller.measuredHeight, ', ', int(vScroll));
					if (vScroll > scroller.measuredHeight - scroller.height + 20)
					{
						if (!loadingGroup.visible)
						{
							loadingGroup.visible = true;
							fadeIn.play();
						}
						loadingGroup.y = scroller.measuredHeight - vScroll;
						
						if (vScroll > scroller.measuredHeight - scroller.height + 90)
						{
							if (arrowImage.rotation == 180)
								arrowImage.rotation = 0;
							loadText.text = RELEASE_TEXT;
						}
						else
						{
							if (arrowImage.rotation == 0)
								arrowImage.rotation = 180;
							loadText.text = PULL_DOWN_TEXT;
						}
					}
					else
					{
						loadingGroup.visible = false;
					}
				}
			}
			
			protected function scroller_mouseUpHandler(event:MouseEvent):void
			{
				if (_loadingCourses || !scroller.verticalScrollBar) return;
				//scroller.invalidateSize();
				//scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum
				
				trace('new=', scroller.verticalScrollBar.value, ', max=', scroller.verticalScrollBar.maximum);
				
				if (scroller.verticalScrollBar.value > scroller.measuredHeight - scroller.height + 90)
				{
					loadingGroup.visible = false;
					
					if (_currentPage < _totalPages)
					{
						
						
						scroller.setStyle("verticalScrollPolicy", "off");
						
					
						courseList.addItem({text:"loading..."});
						
						scroller.validateNow();
						
						
							
						scroller.setStyle("interactionMode", "none");
						//scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum
					
						
						scroller.viewport.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onScroll);
						list.validateNow();
						
						//scroller.invalidateSize();
						
						//scroller.setStyle("interactionMode", "touch");
						
						//var ol:Number = scroller.verticalScrollBar.value;
						//scroller.verticalScrollBar.value = scroller.verticalScrollBar.maximum;
						//trace('old=', ol, ', new=', scroller.verticalScrollBar.value, ', max=', scroller.verticalScrollBar.maximum);
						//trace('max=', scroller.verticalScrollBar.maximum, ', val=', scroller.verticalScrollBar.value, ', h='+scroller.height);
							
						_currentPage++;
						getCourseList();   
					}
				}
			}
			
		
		
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
			}
			
			protected function btnLogout_clickHandler(event:MouseEvent):void
			{
				if (NotificationManager.isSupported) {
					var nativeAlert:Alert = new Alert();
					nativeAlert.addEventListener(AlertEvent.ALERT_CLOSED, alertCloseHandler);
					nativeAlert.showAlert("你确定要注销当前用户吗？", "", "否,是");
				}
				else {
					DataManager.instance.user.logout();
				}
			}
			
			private function alertCloseHandler(event:AlertEvent):void
			{
				//nativeAlert.removeEventListener(AlertEvent.ALERT_CLOSED, alertCloseHandler);
				if (event.label == "是")
					DataManager.instance.user.logout();
			}
			
			private function preinitialize():void
			{
				var entered:Number = FlexGlobals.topLevelApplication.persistenceManager.getProperty("entered");
				if (!entered)
				{
					actionBarVisible = tabBarVisible = false;
					currentState = "firsttime";
				}
			}
			
			protected function welcomeList_changeHandler(event:IndexChangeEvent):void
			{
				actionBarVisible = tabBarVisible = true;
				currentState = "default";
				
				FlexGlobals.topLevelApplication.persistenceManager.setProperty("entered", 1);
			}
			
			protected function welcomeList_changingHandler(event:IndexChangeEvent):void
			{
				if (event.newIndex < welcomes.length - 1)
					event.preventDefault();
			}
			
			protected function tapgroup_tapHandler(event:TapEvent):void
			{
				if (_loadingCourses) return;
				var idx:Number = Math.ceil(event.locationY / 150) - 1;
				//trace("x=", event.locationX+', y='+event.locationY, ', index=', idx, ', total ', courseList.length, ' courses');
				var renderer:IItemRenderer = list.dataGroup.getElementAt(idx) as IItemRenderer;
				renderer.selected = true;
				var course:Object = courseList.getItemAt(idx);
				navigator.pushView(views.CourseDetailView, course);
			}
			
			private function recommendService_resultHandler(event:ResultEvent):void
			{
				var json:String = String(event.result);
				var obj:Object = JSON.parse(json);
				for (var idx:Object in obj)
				{
					recommends.addItem(obj[idx]);
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="listService" url="http://www.glr.cn/appapi/app_course_list.php" resultFormat="text" result="listService_resultHandler(event)"/>
		<s:HTTPService id="recommendService" url="http://www.glr.cn/appapi/app_img_ad.php" resultFormat="text" result="recommendService_resultHandler(event)"/>
		<s:ArrayCollection id="courseList"/>
		<s:ArrayCollection id="recommends"/>
		<s:ArrayCollection id="welcomes">
			<fx:Object pic="assets/01.jpg"/>
			<fx:Object pic="assets/02.jpg"/>
			<fx:Object pic="assets/03.jpg"/>
			<fx:Object pic="assets/04.jpg"/>
		</s:ArrayCollection>
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="firsttime"/>
	</s:states>
	<s:Scroller id="scroller" width="100%" height="100%" verticalScrollPolicy="on"
				mouseUp="scroller_mouseUpHandler(event)">
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:MultiDPIVerticalLayout sourceDPI="320"
										  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0"/>
			</s:layout>
			
			<!-- top banner -->
			<s:List id="pagedList"
					width="100%" height="454"
					verticalScrollPolicy="off" horizontalScrollPolicy="on"
					pageScrollingEnabled="true"
					itemRenderer="renderers.RecommendCourseItemRenderer"
					skinClass="skins.PagedListSkin"
					change="pagedList_changeHandler(event)"
					dataProvider="{recommends}"
					>
				<s:layout>
					<s:TileLayout orientation="rows" requestedRowCount="1" 
								  columnWidth="{pagedList.width}" rowHeight="{pagedList.height}" 
								  verticalGap="0" horizontalGap="0"/>
				</s:layout>
			</s:List>
			
			<!-- list header -->
			<s:Group width="100%" height="66">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="#319ED7"/>
					</s:fill>
				</s:Rect>
				<s:Rect width="100%" height="2">
					<s:fill>
						<s:SolidColor color="#ffffff" alpha="0.5"/>
					</s:fill>
				</s:Rect>
				<s:Rect width="100%" bottom="0" height="2">
					<s:fill>
						<s:SolidColor color="#000000" alpha="0.3"/>
					</s:fill>
				</s:Rect>
				<s:Label text="最新上线课程" styleName="captionText" color="#FFFFFF" width="100%" height="100%" verticalAlign="middle" paddingLeft="10"/>
			</s:Group>
			
			<!-- list -->
			<components:TapGroup id="tapGroup" width="100%" height="{courseList.length * 150}" tap="tapgroup_tapHandler(event)">
				<s:List id="list" width="100%" height="{courseList.length * 150}" dataProvider="{courseList}">
					<s:itemRenderer>
						<fx:Component>
							<renderers:CourseIR iconWidth="180" iconHeight="120"
												iconFillMode="clip" iconScaleMode="letterbox"
												iconPlaceholder="@Embed('assets/icon-course-placeholder.png')"
												iconField="pic"
												labelField="subject">
								
							</renderers:CourseIR>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
			</components:TapGroup>
		</s:Group>
	</s:Scroller>
	<s:HGroup id="loadingGroup" horizontalAlign="center" verticalAlign="middle" width="{list.width}" height="50" visible="false" includeInLayout="false">
		<s:Image id="arrowImage"  source="@Embed('assets/arrow-up.png')" rotation="180"/>
		<s:Label height="100%" verticalAlign="middle" text="{PULL_DOWN_TEXT}" id="loadText"/>
	</s:HGroup>
	
	<s:List id="welcomeList"
			width="100%" height="100%"
			verticalScrollPolicy="off" horizontalScrollPolicy="on"
			pageScrollingEnabled="true"
			itemRenderer="renderers.WelcomeItemRenderer"
			skinClass="skins.PagedListSkin"
			changing="welcomeList_changingHandler(event)"
			change="welcomeList_changeHandler(event)"
			dataProvider="{welcomes}"
			selectionColor="#4d86b3"
			includeIn="firsttime"
			>
		<s:layout>
			<s:TileLayout orientation="rows" requestedRowCount="1" 
						  columnWidth="{welcomeList.width}" rowHeight="{welcomeList.height}" 
						  verticalGap="0" horizontalGap="0"/>
		</s:layout>
	</s:List>
	<s:actionContent>
		<s:Button id="btnLogin" label="登录" click="navigator.pushView(views.LoginView)" visible="{!DataManager.instance.user.loggedIn}" includeInLayout="{!DataManager.instance.user.loggedIn}"/>
		<s:Button id="btnLogout" label="注销" click="btnLogout_clickHandler(event)" visible="{DataManager.instance.user.loggedIn}" includeInLayout="{DataManager.instance.user.loggedIn}"/>
	</s:actionContent>
</s:View>