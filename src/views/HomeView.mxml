<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		viewActivate="view1_viewActivateHandler(event)"
		viewDeactivate="view1_viewDeactivateHandler(event)"
		mouseUp="view1_mouseUpHandler(event)"
		title="今日推荐"
		xmlns:renderers="renderers.*">
	<fx:Script>
		<![CDATA[
			import classes.DataManager;
			
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.core.NavigationUnit;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			private var _draggingList:Boolean;
			private var _currentPage:Number = 1;
			private var _totalPages:Number;
			
			[Bindable]
			private var PULL_DOWN_TEXT:String = "获取更多课程...";
			private var RELEASE_TEXT:String = "松开即刷新...";
			
			private function getCourseList():void
			{
				listService.url = "http://www.glr.cn/appapi/app_course_list.php?page=" + _currentPage;
				listService.send();
			}
			
			protected function pagedList_changeHandler(event:IndexChangeEvent):void
			{
				navigator.pushView(views.CourseDetailView, recommends.getItemAt(event.newIndex));
			}

			protected function listService_resultHandler(event:ResultEvent):void
			{
				var json:String = String(event.result);
				trace(json);
				data = JSON.parse(json);
				_totalPages = Math.ceil(Number(data.numcont)/Number(data.perpage));
				
				if (!courseList.source)
				{
					courseList.source = data.datalist;
				}
				else
				{
					if (courseList.length > 0)
						courseList.removeItemAt(courseList.length-1);
					courseList.source = courseList.source.concat(data.datalist);
				}
				
				list.visible = true;
				busyIndicator.visible = busyIndicator.includeInLayout = false;
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				navigator.pushView(views.CourseDetailView, courseList.getItemAt(event.newIndex));
			}
			
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				list.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChange);
				if (data)
				{
					courseList.source = data.datalist;
					list.visible = true;
					busyIndicator.visible = busyIndicator.includeInLayout = false;
				}
				else
				{
					getCourseList();
				}
			}
			
			protected function view1_viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				list.dataGroup.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChange);
				listService.cancel()
			}
			
			protected function onPropertyChange(event:PropertyChangeEvent):void
			{
				if (!list.scroller.verticalScrollBar) return;
				if (event.source == event.target && event.property == "verticalScrollPosition")
				{
					var vScroll:Number = list.scroller.verticalScrollBar.value;
					if(vScroll > list.measuredHeight - list.height + 20){
						if(!loadingGroup.visible){
							loadingGroup.visible = true;
							fadeIn.play();
						}
						loadingGroup.y = list.measuredHeight - vScroll;
						
						if(vScroll > list.measuredHeight - list.height + 90){
							if(arrowImage.rotation == 0)  {
								arrowImage.rotation = 180;
							}
							loadText.text = RELEASE_TEXT;
							
						}else{
							if(arrowImage.rotation == 180)  {
								arrowImage.rotation = 0;
							}
							loadText.text = PULL_DOWN_TEXT;
						}
						
					}else{
						loadingGroup.visible = false;
					}
				}
			}
			
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				if (_draggingList)
					_draggingList = false;
				if (list.scroller.verticalScrollBar.value > list.measuredHeight - list.height + 90){
					loadingGroup.visible = false;
					courseList.addItem({text:"loading..."});
					list.validateNow();
					list.layout.verticalScrollPosition += list.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
					
					if (_currentPage < _totalPages-1)
					{
						_currentPage++;
						getCourseList();
					}
					else
					{
						PULL_DOWN_TEXT = RELEASE_TEXT = "已经获取所有课程列表";
					}
				}
			}
			
			private function scrollToBottom():void {
				// update the verticalScrollPosition to the end of the List
				// virtual layout may require us to validate a few times
				var delta:Number = 0;
				var count:int = 0;
				while (count++ < 10){
					list.validateNow();
					delta = list.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
					list.layout.verticalScrollPosition += delta;
					
					if (delta == 0)
						break;
				}
			}
			
			protected function view1_mouseUpHandler(event:MouseEvent):void
			{
				if (_draggingList)
				{
					_draggingList = false;
					list_mouseUpHandler(event);
				}
			}
			
			protected function list_mouseDownHandler(event:MouseEvent):void
			{
				_draggingList = true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="listService" url="http://www.glr.cn/appapi/app_course_list.php" resultFormat="text" result="listService_resultHandler(event)"/>
		<s:ArrayList id="courseList"/>
		<fx:Model id="recommend" source="assets/recommends.xml"/>
		<s:ArrayCollection id="recommends" source="{recommend.Course}"/>
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:MultiDPIVerticalLayout sourceDPI="320"
									  paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" gap="0"/>
		</s:layout>
		
		<!-- top banner -->
		<s:List id="pagedList"
				width="100%" height="200"
				verticalScrollPolicy="off" horizontalScrollPolicy="on"
				pageScrollingEnabled="true"
				itemRenderer="renderers.RecommendCourseItemRenderer"
				skinClass="skins.PagedListSkin"
				change="pagedList_changeHandler(event)"
				dataProvider="{recommends}"
				>
			<s:layout>
				<s:TileLayout orientation="rows" requestedRowCount="1" 
							  columnWidth="{pagedList.width}" rowHeight="{pagedList.height}" 
							  verticalGap="0" horizontalGap="0"/>
			</s:layout>
		</s:List>
		
		<!-- list header -->
		<s:Group width="100%" height="66">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#319ED7"/>
				</s:fill>
			</s:Rect>
			<s:Rect width="100%" height="2">
				<s:fill>
					<s:SolidColor color="#ffffff" alpha="0.5"/>
				</s:fill>
			</s:Rect>
			<s:Rect width="100%" bottom="0" height="2">
				<s:fill>
					<s:SolidColor color="#000000" alpha="0.3"/>
				</s:fill>
			</s:Rect>
			<s:Label text="最新上线课程" styleName="captionText" color="#FFFFFF" width="100%" height="100%" verticalAlign="middle" paddingLeft="10"/>
		</s:Group>
		
		<!-- list -->
		<s:Group width="100%" height="100%">
			<s:HGroup id="busyIndicator" width="100%" height="100" verticalAlign="middle">
				<s:Spacer width="100%"/>
				<s:Label text="正在获取数据" height="60" verticalAlign="middle"/>
				<s:BusyIndicator symbolColor="#0C3170" height="40"/>
				<s:Spacer width="100%"/>
			</s:HGroup>
			
			<s:List id="list" visible="false" width="100%" height="100%" dataProvider="{courseList}"
					change="list_changeHandler(event)"
					mouseDown="list_mouseDownHandler(event)"
					mouseUp="list_mouseUpHandler(event)">
				<s:itemRenderer>
					<fx:Component>
						<renderers:CourseIR iconWidth="180" iconHeight="120"
													  iconFillMode="clip" iconScaleMode="letterbox"
													  iconPlaceholder="@Embed('assets/icon-course-placeholder.png')"
													  iconField="pic"
													  labelField="subject">
							
						</renderers:CourseIR>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
			<s:HGroup paddingLeft="180" verticalAlign="middle" width="{list.width}" id="loadingGroup" visible="false" height="50" includeInLayout="false">
				<s:Image id="arrowImage"  source="@Embed('assets/arrow-up.png')"/>
				<s:Label text="{PULL_DOWN_TEXT}"  id="loadText"/>
			</s:HGroup>
		</s:Group>
	</s:Group>
	
	<s:actionContent>
		<s:Button id="btnLogin" label="登录" click="navigator.pushView(views.LoginView)" visible="{!DataManager.instance.user.loggedIn}" includeInLayout="{!DataManager.instance.user.loggedIn}"/>
		<s:Button id="btnLogout" label="登出" click="DataManager.instance.user.logout()" visible="{DataManager.instance.user.loggedIn}" includeInLayout="{DataManager.instance.user.loggedIn}"/>
	</s:actionContent>
</s:View>