<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="播放历史"
		xmlns:renderers="renderers.*">
	<fx:Script>
		<![CDATA[
			import classes.Constants;
			import classes.DataManager;
			import classes.EventManager;
			
			import com.juankpro.ane.localnotif.NotificationManager;
			
			import events.CourseItemEvent;
			import events.ScrollingEvent;
			
			import ie.jampot.nativeExtensions.Alert;
			import ie.jampot.nativeExtensions.AlertEvent;
			
			import models.Course;
			
			import mx.core.FlexGlobals;
			import mx.events.PropertyChangeEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			
			protected function onPropertyChange(event:PropertyChangeEvent):void
			{
				if (event.source == event.target && event.property == "verticalScrollPosition")
				{
					if (Math.abs(Number(event.oldValue) - Number(event.newValue)) > 10)
						list.dispatchEvent(new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED));
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				if (!DataManager.instance.user.loggedIn)
				{
					navigator.pushView(views.LoginView);
				}
				else
				{
					var course:Course = list.selectedItem as Course;
					var evt:CourseItemEvent = new CourseItemEvent(CourseItemEvent.Play);
					evt.kvidoeid = course.kvideoid;
					evt.courseid = course.courseid;
					evt.pic = course.picUrl;
					evt.subject = course.subject;
					evt.avatar = course.avatarUrl;
					evt.watchSpot = course.watchSpot;
					EventManager.instance.dispatchEvent(evt);
				}
			}
			
			protected function btnClear_clickHandler(event:MouseEvent):void
			{
				if (NotificationManager.isSupported) {
					var nativeAlert:Alert = new Alert();
					nativeAlert.addEventListener(AlertEvent.ALERT_CLOSED, alertCloseHandler);
					nativeAlert.showAlert("确定要清空所有听课历史记录吗？", "", "否,是");
				}
				else {
					DataManager.instance.clearCourse(Constants.TYPE_HISTORY);
					courseList.removeAll();
				}
			}
			
			private function alertCloseHandler(event:AlertEvent):void
			{
				if (event.label == "是") {
					DataManager.instance.clearCourse(Constants.TYPE_HISTORY);
					courseList.removeAll();
				}
			}
			
			private function playCourseItem(event:CourseItemEvent):void
			{
				var obj:Object = {kvideoid:event.kvidoeid, courseid:event.courseid, subject:event.subject, avatar:event.avatar, pic:event.pic, watchspot:event.watchSpot};
				navigator.pushView(views.CoursePlayView, obj);
			}
			
			private function deleteCourseItem(event:CourseItemEvent):void
			{
				DataManager.instance.deleteCourseById(Constants.TYPE_HISTORY, event.courseid);
				
				for (var i:int=0; i<courseList.length; i++) {
					if (courseList.getItemAt(i).courseid == event.courseid) {
						courseList.removeItemAt(i);
						break;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayList id="courseList"/>
	</fx:Declarations>
	<s:viewActivate>
		<![CDATA[
		// event binding
		EventManager.instance.addEventListener(CourseItemEvent.Play, playCourseItem);
		EventManager.instance.addEventListener(CourseItemEvent.Delete, deleteCourseItem);
		
		// data binding
		courseList.removeAll();
		var courses:Vector.<Course> =  DataManager.instance.getCoursesByType(Constants.TYPE_HISTORY);
		if (courses)
		{
			for (var i:int=courses.length-1; i>=0; i--) {
				courseList.addItem(courses[i]);
			}
		}
		]]>
	</s:viewActivate>
	<s:viewDeactivate>
		<![CDATA[
		EventManager.instance.removeEventListener(CourseItemEvent.Detail, playCourseItem);
		EventManager.instance.removeEventListener(CourseItemEvent.Delete, deleteCourseItem);
		]]>
	</s:viewDeactivate>
	<s:Group width="100%" height="100%">
		<s:List id="list" width="100%" height="100%" dataProvider="{courseList}"
				visible="{courseList.length>0}" includeInLayout="{courseList.length>0}"
				creationComplete="list.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChange)"
				changing="list.dispatchEvent(new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED))"
				change="list_changeHandler(event)">
			<s:itemRenderer>
				<fx:Component>
					<renderers:HistoryItemRenderer labelField="subject"
										messageFunction="getMessage"
										messageStyleName="historyMessage"
										decorator="@Embed('assets/decorator-arrow.png')">
						<fx:Script>
							<![CDATA[
								private function getMessage(item:Object):String
								{
									/* var date:Date = new Date();
									var diff:Number = Math.floor(date.getTime()/1000) - item.viewTime;
									trace(diff);
									var minutes:Number = Math.floor(diff/60);
									if (minutes == 0)
										return "现在";
									else if (minutes < 60)
										return minutes + "分钟前";
									else if (minutes < 60*24)
										return Math.floor(minutes/60) + "小时前";
									else
										return Math.floor(minutes/(60*24)) + "天前"; */
									return "";
								}
							]]>
						</fx:Script>
					</renderers:HistoryItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:Label text="您还没有任何课程观看记录" styleName="captionText" color="#666666" width="100%" height="80" verticalAlign="middle" textAlign="center"
				 visible="{courseList.length==0}" includeInLayout="{courseList.length==0}"/>
	</s:Group>
	<s:navigationContent>
		<s:Button label="下载">
			<s:click>
				<![CDATA[
				navigator.pushView(views.DownloadView);
				]]>
			</s:click>
		</s:Button>
	</s:navigationContent>
	<s:actionContent>
		<s:Button id="btnClear" label="清除" click="btnClear_clickHandler(event)" visible="{courseList.length>0}"/>
	</s:actionContent>
</s:View>