<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="{FlexGlobals.topLevelApplication.width}" height="{FlexGlobals.topLevelApplication.height}"
		 addedToStage="onAdded(event)" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.components.*;
			import com.components.HScrollView;
			import com.greensock.TweenLite;
			import com.proxies.ActionProxy;
			import com.proxies.ConfigProxy;
			import com.proxies.MediaProxy;
			import com.utils.DataObjectEvent;
			
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.StageOrientationEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.SystemManager;
			
			
			private var _url:String;
			
			private var configProxy:ConfigProxy;
			private var actionProxy:ActionProxy;
			private var mediaProxy:MediaProxy;
			
			
			private var contentContainer:HScrollView;
			public var pageContainer:PageContanier;
			private var penContainer:PenContainer;
			private var messageContainer:MessageContainer;
			private var messageBtn:MessageButton;
			
			private var loadingPage:LoadingPage;
			
			public var controlPanel:ControlPanelUI;
			
			private var uiComponent:UIComponent;
			
			[Bindable]
			private var scaleFactor:Number;
			
			private var photoLoader:PhotoLoader;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				scaleFactor = FlexGlobals.topLevelApplication.applicationDPI / FlexGlobals.topLevelApplication.runtimeDPI;
				
				
				uiComponent = new UIComponent();
				
				contentContainer = new HScrollView();
				
				contentContainer.percentWidth = 100;
				contentContainer.percentHeight = 100;
				
				
				pageContainer = new PageContanier();
				penContainer = new PenContainer();
				messageContainer = new MessageContainer();
				
				loadingPage = new LoadingPage();
				loadingPage.scaleX = loadingPage.scaleY = scaleFactor;
				
				photoLoader = new PhotoLoader();
				
				this.addElement(contentContainer);
				
				this.addElement(messageContainer);
				
				//messageContainer.y = 100;
				messageContainer.x = width;
				trace('FlexGlobals.topLevelApplication.width=', FlexGlobals.topLevelApplication.width, ', width=', this.width);
				
				this.addElement(uiComponent);
				messageContainer.visible = false;
				
				contentContainer.addFlashChild(pageContainer);
				contentContainer.addFlashChild(penContainer);
				
				
				uiComponent.addChild(loadingPage);
				
				messageBtn = new MessageButton();
				messageBtn.visible = false;
				uiComponent.addChild(messageBtn);
				
				pageContainer.addEventListener("page_loaded", onPageLoaded);
				pageContainer.addEventListener(Event.RESIZE, onResize);
				
				messageBtn.addEventListener(MouseEvent.CLICK, messageBtnHandle, false, 0, true);
				stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChanged);
			}
			
			private var _photoUrl:String;
			
			public function start(_url:String, photoUrl:String):void{
				_photoUrl = photoUrl;
				configProxy = new ConfigProxy(_url);
				configProxy.loader.addEventListener(Event.COMPLETE, configLoaded);
				
			}
			
			private var isAdded:Boolean = false;
			private var isPageLoaed:Boolean = false;
			
			private function onAdded(e:Event):void{
				isAdded = true;				
				resetContentSize();
			}
			
			private function onPageLoaded(e:Event):void{
				isPageLoaed = true;
				if (this.uiComponent.contains(this.loadingPage))
					uiComponent.removeChild(this.loadingPage);
				
				resetContentSize();
				
				dispatchEvent(new Event("ready_to_play"));
				controlPanel.visible = true;
				messageContainer.visible = true;
				messageContainer.x = width;
				
				pageContainer.addEventListener(MouseEvent.CLICK, showHideControls);
				
				//messageBtn.visible = true;
				messageBtn.x = width - messageBtn.width + 5;
				messageBtn.y = (height - messageBtn.height) / 2;
				
				//this.setElementIndex(info, numElements-1);
			}
			
			private function onResize(e:Event):void{
				resetContentSize();
			}
			
			private function orientationChanged(e:StageOrientationEvent):void{
				
				resetContentSize();
				
				
				if(stage)
				{
					controlPanel.y = height - controlPanel.realHeight;
					messageContainer.x = width;
					messageBtn.x = width - messageBtn.width + 5;
					//trace(messageBtn.x+'::::'+stage.orientation+', '+stage.deviceOrientation+', before='+e.beforeOrientation+' after='+e.afterOrientation);
				}
			}
			
			private function resetContentSize():void{
				
				if(isAdded&&isPageLoaed)
				{
					
					
					trace('resize FlexGlobals.topLevelApplication.width=', FlexGlobals.topLevelApplication.measuredWidth, ', width=', this.width, ', ', this.measuredWidth);
					var  scale:Number = (width/pageContainer.content.width);
					
					pageContainer.scaleX = scale;
					pageContainer.scaleY = scale;
					penContainer.scaleX = scale;
					penContainer.scaleY = scale;
					
					contentContainer.rangeRect.width = pageContainer.width;
					
					contentContainer.rangeRect.height = pageContainer.height;
					
					
					
				}
			}
			
			
			private function configLoaded(e:Event):void{
				actionProxy = new ActionProxy(configProxy.action_path);
				actionProxy.loader.addEventListener(Event.COMPLETE, actionLoaded);
			}
			
			private function  actionLoaded(e:Event):void{
				
				mediaProxy = new MediaProxy(configProxy.flv_path, actionProxy, pageContainer, penContainer, messageContainer);
				
				
				controlPanel = new ControlPanelUI(mediaProxy);
				
				photoLoader.load(new URLRequest(this._photoUrl));
				
				trace("url photot  " + this._photoUrl)
				controlPanel.addEventListener("play_time_changed", onPlayTimeChange, false, 0, true);
				uiComponent.addChild(controlPanel);
				uiComponent.addChild(photoLoader);
				controlPanel.visible = false;
				//controlPanel.visible = false;
				//controlPanel.alpha = 0.8;
				//photoLoader.width = 48;
				//photoLoader.height = 48;
				
				photoLoader.y =  height - controlPanel.realHeight - 48 - 20;
				photoLoader.x = width - 48 -20	
					
				controlPanel.y = height - controlPanel.realHeight;
				//controlPanel.width = width;
				
				//infoCP.text = "controlPanel.y: "+ controlPanel.y;
			}
			
			private function onPlayTimeChange(e:DataEvent):void{
				
				dispatchEvent(e);
			}
			
			private function messageBtnHandle(e:MouseEvent):void{
				
				if(messageContainer)
				{
					if (messageContainer.x >= Math.floor(width)
						&& !isControlShow)
					{
						TweenLite.to(messageContainer, 0.3, {x:width-messageContainer.width});
						
					}
					else
					{
						TweenLite.to(messageContainer, 0.3, {x:width});
						
					}
				}
				
				
			}
			
			private var isControlShow:Boolean = true;
			private function showHideControls(e:MouseEvent):void{
				
				//messageContainer.visible = !messageContainer.visible;
				//controlPanel.visible = !controlPanel.visible;
				if(controlPanel && stage)
				{
					
					//infoCP.text = "  " + height + " stageHeigth  " + stage.stageHeight + "   controlPanel  " + controlPanel.y;
					
					if(controlPanel.y >= Math.floor(height))
					{
						// TweenLite.to(messageContainer, 0.3, {x:FlexGlobals.topLevelApplication.width-messageContainer.width});
						photoLoader.visible = true;
						messageBtn.visible = false;
						isControlShow = true;
						TweenLite.to(controlPanel, 0.3, {y:height - controlPanel.realHeight});
						TweenLite.to(messageContainer, 0.3, {x:width});
					}
					else
					{
						//TweenLite.to(messageContainer, 0.3, {x:FlexGlobals.topLevelApplication.width});
						photoLoader.visible = false;
						messageBtn.visible = true;
						isControlShow = false;
						TweenLite.to(controlPanel, 0.3, {y:height});
					}
				}
				
			}
			
			public function exit():void{
				
				if(mediaProxy)	
					mediaProxy.closeStream();
				
				if(actionProxy)
					if(actionProxy.loader)
						actionProxy.loader.removeEventListener(Event.COMPLETE, actionLoaded);
				
				if(controlPanel)
					controlPanel.clearEventHandler();
				
				stage.removeEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChanged);
				stage.removeEventListener(MouseEvent.CLICK, showHideControls);
				
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>

	
</s:Group>
	
