<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%" addedToStage="onAdded(event)" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.components.*;
			import com.components.HScrollView;
			import com.greensock.TweenLite;
			import com.proxies.ActionProxy;
			import com.proxies.ConfigProxy;
			import com.proxies.MediaProxy;
			import com.utils.DataObjectEvent;
			
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.StageOrientationEvent;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
           
			
			private var _url:String;
			
			private var configProxy:ConfigProxy;
			private var actionProxy:ActionProxy;
			private var mediaProxy:MediaProxy;
			
			
			private var contentContainer:HScrollView;
			public var pageContainer:PageContanier;
			private var penContainer:PenContainer;
			private var messageContainer:MessageContainer;
			private var messageBtn:MessageButton;
			
			private var loadingPage:LoadingPage;
			
			public var controlPanel:ControlPanelUI;
			
			private var uiComponent:UIComponent;
			
			

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				uiComponent = new UIComponent();
				
				contentContainer = new HScrollView();
				
				contentContainer.percentWidth = 100;
				contentContainer.percentHeight = 100;
				
				
				pageContainer = new PageContanier();
				penContainer = new PenContainer();
				messageContainer = new MessageContainer();
				
				loadingPage = new LoadingPage();
				
				this.addElement(contentContainer);
				
				this.addElement(messageContainer);
				
				messageContainer.y = 100;
				messageContainer.x = stage.stageWidth;
				
			    this.addElement(uiComponent);
				messageContainer.visible = false;
				
				contentContainer.addFlashChild(pageContainer);
				contentContainer.addFlashChild(penContainer);
			    
				
				uiComponent.addChild(loadingPage);
				
				messageBtn = new MessageButton();
				messageBtn.visible = false;
				uiComponent.addChild(messageBtn);
					
				pageContainer.addEventListener("page_loaded", onPageLoaded);
				pageContainer.addEventListener(Event.RESIZE, onResize);
				
				messageBtn.addEventListener(MouseEvent.CLICK, messageBtnHandle, false, 0, true);
				stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChanged);
			}
		
			public function start(_url:String):void{
				
				configProxy = new ConfigProxy(_url);
				configProxy.loader.addEventListener(Event.COMPLETE, configLoaded);
				
			}
		
			private var isAdded:Boolean = false;
			private var isPageLoaed:Boolean = false;
			
			private function onAdded(e:Event):void{
				isAdded = true;				
				resetContentSize();
			}
			
			private function onPageLoaded(e:Event):void{
				isPageLoaed = true;
				trace("page Loaded sclae")
				if (this.uiComponent.contains(this.loadingPage))
					uiComponent.removeChild(this.loadingPage);
				
				resetContentSize();
				
				dispatchEvent(new Event("ready_to_play"));
				controlPanel.visible = true;
				messageContainer.visible = true;
				
				pageContainer.addEventListener(MouseEvent.CLICK, showHideControls);
				
				messageBtn.visible = true;
				messageBtn.x = stage.stageWidth - messageBtn.width + 5;
				messageBtn.y = messageContainer.y + 100;
			}
			
			private function onResize(e:Event):void{
				resetContentSize();
			}
			
			private function orientationChanged(e:StageOrientationEvent):void{
				
				 resetContentSize();
				 
				 
				 if(stage)
				 {
				  controlPanel.y = stage.stageHeight - controlPanel.realHeight;
				  messageContainer.x = stage.stageWidth;
				  messageBtn.x = stage.stageWidth - messageBtn.width + 5;
				  trace(messageBtn.x+'::::'+stage.orientation+', '+stage.deviceOrientation+', before='+e.beforeOrientation+' after='+e.afterOrientation);
				 }
			}
			
			private function resetContentSize():void{
				
				trace(isAdded, isPageLoaed)
				
				if(isAdded&&isPageLoaed)
				{
					
					
				 trace("===============resized==============")
			     var  scale:Number = (this.stage.stageWidth/pageContainer.content.width);
				
				 pageContainer.scaleX = scale;
				 pageContainer.scaleY = scale;
				 penContainer.scaleX = scale;
				 penContainer.scaleY = scale;
				 
				 contentContainer.rangeRect.width = pageContainer.width;
				 
				 contentContainer.rangeRect.height = pageContainer.height;
				 
				
				
				}
			}
			
			
			private function configLoaded(e:Event):void{
				actionProxy = new ActionProxy(configProxy.action_path);
				actionProxy.loader.addEventListener(Event.COMPLETE, actionLoaded);
			}
			
			private function  actionLoaded(e:Event):void{
				
				mediaProxy = new MediaProxy(configProxy.flv_path, actionProxy, pageContainer, penContainer, messageContainer);
				
				
				controlPanel = new ControlPanelUI(mediaProxy);
				controlPanel.addEventListener("play_time_changed", onPlayTimeChange, false, 0, true);
				uiComponent.addChild(controlPanel);
				controlPanel.visible = false;
				//controlPanel.visible = false;
				//controlPanel.alpha = 0.8;
				controlPanel.y = stage.stageHeight - controlPanel.realHeight;
			}
			
			private function onPlayTimeChange(e:DataEvent):void{
				
				dispatchEvent(e);
			}
			
			private function messageBtnHandle(e:MouseEvent):void{
				
				if(messageContainer)
				{
					if(messageContainer.x >= stage.stageWidth)
					{
						TweenLite.to(messageContainer, 0.3, {x:stage.stageWidth-messageContainer.width});
						
					}
					else
					{
						TweenLite.to(messageContainer, 0.3, {x:stage.stageWidth});
						
					}
				}
				
				
			}
			
			
			private function showHideControls(e:MouseEvent):void{
				
				//messageContainer.visible = !messageContainer.visible;
				//controlPanel.visible = !controlPanel.visible;
				if(controlPanel&&stage)
				{
				 if(controlPanel.y >= stage.stageHeight)
				 {
				 // TweenLite.to(messageContainer, 0.3, {x:stage.stageWidth-messageContainer.width});
				  TweenLite.to(controlPanel, 0.3, {y:stage.stageHeight - controlPanel.realHeight});
				 }
				 else
				 {
					//TweenLite.to(messageContainer, 0.3, {x:stage.stageWidth});
					TweenLite.to(controlPanel, 0.3, {y:stage.stageHeight});
				 }
				}
				
			}
			
			public function exit():void{
				
			  if(mediaProxy)	
				mediaProxy.closeStream();
			
			  if(actionProxy)
				  if(actionProxy.loader)
			         actionProxy.loader.removeEventListener(Event.COMPLETE, actionLoaded);
			  
			  if(controlPanel)
				  controlPanel.clearEventHandler();
			  
			  stage.removeEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChanged);
			  stage.removeEventListener(MouseEvent.CLICK, showHideControls);

			}
			
				
		]]>
	</fx:Script>
	
	
</s:Group>
